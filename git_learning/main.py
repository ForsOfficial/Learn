

# ЖЕСТКАЯ ТЕОРИЯ:

# https://youtu.be/H88FDg-Zt-Y?si=KKWtJcrFDdFEqJLw

# git init - команда для иницилизации репозитория.
# Изначально мы создаем репозиторий командой git init.
# Это означает, что теперь git следит за определенной папкой на ПК.


# COMMIT
# commit - Контрольная точка, которую мы создаем.
# Мы можем возвращаться на предыдущие контрольные точки,
# а также на точки находящиейся по ветви впереди.

# hash commit - уникальный идентификатор контрольной точки.
# Благодаря контрольным точкам мы можем отслеживать изменения нашего проекта.

# В процесее работы у нас всегда будет история изменения нашего проекта,
# в тех точках где мы сохранились.
# Также благодаяр git мы можем видеть разницу между двумя контрольными точками.


# REMOTE REPOS
# Удаленный репозиторий (remote repos) - репозитория хранящийся на облаке,
# благодаря которому мы можем давать доступ к репозиторию другим участникам.

# Штука на которой мы можем зарегистрироваться и связать свой локальный
# репозиторий с облачным хранилищем, для того чтобы синхронизировать код.


# git clone {url} - команда для коипрования проекта из облака.
# url в данном случае скидывает челове создавший удаленный репозиторий.
# Люди скопирующие репозиторий к себе на ПК, связывают полученный ими
# локальный репозиторий, с облачным.
# Благодаря этому люди смогут работать с эти репозиторием и отправлять изменения.


# Операция push - отправка изменений с локального репозитория в облачный репозиторий.
# Операция pull - получение новых контрольных точек/изменений в локальный репозиторий
# из облачного.
# То есть когда один человек изменил код, другие должны сделать pull,
# чтобы изменения применились на их локальный репозиторий, и они посмотрели:
# не сломалось что-либо у них.

# ВЕБ

# Веб-сервисы для хаостинга кодовой базы проектов:
# Github, Gitlab, Bitbucket.

# Связать локальный репозиторий с облачным(удаленным), можно 2 способами:
# 1. Когда проект уже существует, можно подвязать его с помощью терминала.
# 2. Создаем пустой репозиторий с Github (например), а потом
# просто клонируем его себе на локальную машину.


#


# ПРАКТИКА. LOCAL AND REMOTE REPOSITORY.

# https://youtu.be/ic7cukryHkA?si=waHfA-bzU0dMjMaR

# У нас есть локальный репозиторий - папка с проектом, за которым надзирает git.
# Он бросает туда посредника, некий жучок - файл git, который следит за всем,
# что происходит в этой папке.

# Локальный репозиторий знает о существовании удаленного,
# но удаленный не всегда знает о существовании локального.

# Связать локальный репозиторий с облачным(удаленным), можно 2 способами:

# - Когда проект уже существует, можно подвязать его с помощью терминала:
# 1. Создаем деректорию на ПК при помощи git-bash.exe
# 2. В git-bash в нужной нам директории вводим git init


# - Создаем пустой репозиторий с Github (например), а потом
# просто клонируем его себе на локальную машину.
# 1. Создаем репозиторий в github
# 2. Переходим в то место где хотим создать проект при помощи git-bash.exe
# 3. Вводим: git clone https://github.com/ForsOfficial/test_repo.git
# 4. Готово


#


# ВЕТКИ. СЛИЯНИЕ ВЕТОК. PULL-REQUESTS.

# https://youtu.be/HUmQJlfDQxw?si=LyKH1-VyKSlV7QZj

# Прод - продакшен.

# Проект живет тем, что есть какая-то актуальная версия проекта в проде.
# Эта версия находится в главной веткой (main or master)

# Основная ветка (main or master) - Является основной программой.
# Она должна быть максимально хорошей, качественной и протестированной.


# Ветка - является альтернативной реальностью главной ветки,
# на ней тестится новое изменение. Она должна обязательно исходить из контрольной точки.
# Отдельная ветка предназначется одному человеку чтобы он мог тестить свою фичу.

# git branch {name} - команда для создания отдельной ветки.
# git checkout {name_branch} - команда для переключения между ветками.
#  -b - флаг благодаря которому можно создать ветку и сразу переключиться на неё.
# git checkout -b {name_branch}


# git merge {name_branch} - слияние ветки с основной веткой.
# Это делается для того чтобы изменения из побочной ветки применились к основной.
# В этот момент происходит новый релиз, то есть выкатывается новая ветка в прод.


# Вети решают важные задачи:
# 1. Упорядочивают внеснние изменений в основную ветку и делают их безопасными.
# 2. Создают возможность для проведения код-ревью.


# Код-ревью - процесс при котором, товарищи расматривают изменения
# кодовой базы друг у друга.
# Или тимлид рассматривает изменения и говорит где есть не состыковки или ошибки.

# Перед созданием альтернативной ветки, нужно сделать git pull для того,
# чтобы отпачковываться от последней версии программы.


print('привет')





